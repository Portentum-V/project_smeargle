# This script will target any cover.png files made by Project Smeargle for deletion.
# Currently, this is any cover.png in the music_directory which
# has the author tag set to 'AI' (signature of Project Smeargle).
# This script requires read and write access to cover.png files in the music_directory and subdirectories.

import os
import music_tag
import time
import json
from PIL import Image

start_time = time.time()
image_delete_count = 0

with open('config.json', 'r') as g:
    config = json.load(g)

music_directory = config['music_directory']
dry_run_enabled = config['dry_run_enabled']

# Walk through the directory and scan files for file types (.mp3, .opus, etc)
for dirpath, dirs, files in os.walk(music_directory):
    print(f"Current Directory: {dirpath}")
    print(f"Found Files: {files}")
    for musicfile in files:
        if musicfile.endswith(".mp3"):
            musicfilepath = os.path.join(dirpath, musicfile)
            print(f".mp3 found: {musicfilepath}")
            f = music_tag.load_file(f"{musicfilepath}")
            title_item = f['title']
            artist_item = f['artist']
            art = f['artwork']
            comment_item = f['comment']
            # check if there is any artwork attached to the .mp3 file ("artwork" tag)
            if bool(art.first) == True:
                print("non ai-generated art found. skipping file\n")
            # check if AlbumArt.jpg exists (common artwork format)
            elif os.path.isfile(f"{dirpath}\AlbumArt.jpg"):
                print("cover art exists (AlbumArt.jpg). skipping\n")
            # check if cover.png exists (common artwork format)
            elif os.path.isfile(f"{dirpath}\cover.png"):
                print("cover art exists (cover.png). checking if ai generated")
                im = Image.open(f'{dirpath}\cover.png')
                im.load()
                if im.info['Author'] == str("AI"):
                    image_delete_count += 1
                    if bool(dry_run_enabled) == False:
                        print("cover.png detected to be ai generated. deleting")
                        os.remove(f"{dirpath}\cover.png")
                        print(f"Total images deleted: {image_delete_count}")
                        break
        elif musicfile.endswith(".opus"):
            musicfilepath = os.path.join(dirpath, musicfile)
            print(f".opus found: {musicfilepath}")
            print(f"directory: {dirpath}")
            f = music_tag.load_file(f"{musicfilepath}")
            title_item = f['title']
            artist_item = f['artist']
            # check if cover.png exists (common artwork format)
            if os.path.isfile(f"{dirpath}\cover.png"):
                print("cover art exists (cover.png). checking if ai generated")
                im = Image.open(f'{dirpath}\cover.png')
                im.load()
                # check if cover.png's author is "AI" (signature of images generated by this script)
                if im.info['Author'] == str("AI"):
                    image_delete_count += 1
                    if bool(dry_run_enabled) == False:
                        print("cover.png detected to be ai generated. deleting\n")
                        os.remove(f"{dirpath}\cover.png")
                        print(f"Total images deleted: {image_delete_count}")
                        break
            # check if AlbumArt.jpg exists (common artwork format)
            elif os.path.isfile(f"{dirpath}\AlbumArt.jpg"):
                print("cover art exists (AlbumArt.jpg). skipping this file\n")
                break
        elif musicfile.endswith(".jpg" or ".png"):
            print(f"potential cover art found: {musicfile}.")
        else:
            print(f"unsupported file type: {dirpath}/{musicfile}")
            print("changing directory\n")

print("Scipt complete in %s seconds" % (time.time() - start_time))
print(f"Total images deleted: {image_delete_count}")